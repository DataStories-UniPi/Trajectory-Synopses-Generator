/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.datacron.synopses.maritime;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class critical_point_annotation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2719899840592508385L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"critical_point_annotation\",\"namespace\":\"eu.datacron.synopses.maritime\",\"fields\":[{\"name\":\"stop_start\",\"type\":\"boolean\",\"doc\":\"Flag indicating that the object has just stopped moving and became stationary at this position. Required.\",\"default\":false},{\"name\":\"stop_end\",\"type\":\"boolean\",\"doc\":\"Flag indicating that the object is no longer stationary and has just started moving (w.r.t. its previously known raw position). Required.\",\"default\":false},{\"name\":\"change_in_speed_start\",\"type\":\"boolean\",\"doc\":\"Flag indicating that speed over ground has just changed significantly (by a threshold parameter) w.r.t. the previously known speed. Required.\",\"default\":false},{\"name\":\"change_in_speed_end\",\"type\":\"boolean\",\"doc\":\"Flag indicating that speed over ground no longer diverges from the average speed over the most recent portion of the trajectory. Required.\",\"default\":false},{\"name\":\"slow_motion_start\",\"type\":\"boolean\",\"doc\":\"Flag indicating that this is the first position reported by the object when moving at a very low speed (below a threshold parameter). Required.\",\"default\":false},{\"name\":\"slow_motion_end\",\"type\":\"boolean\",\"doc\":\"Flag indicating that this is the last position reported by the object when moving at a very low speed (below a threshold parameter). Required.\",\"default\":false},{\"name\":\"gap_start\",\"type\":\"boolean\",\"doc\":\"Flag indicating that communication with this object was lost at this position (i.e., this is the last location reported just before a communication gap). Required.\",\"default\":false},{\"name\":\"gap_end\",\"type\":\"boolean\",\"doc\":\"Flag indicating that communication with this object has been restored at this position (i.e., this is the first location reported after a communication gap). Required.\",\"default\":false},{\"name\":\"change_in_heading\",\"type\":\"boolean\",\"doc\":\"Flag indicating that this is a turning point along the trajectory of this object, i.e., its actual heading over ground has just changed significantly (threshold angle parameter) w.r.t. its previous heading. Required.\",\"default\":false},{\"name\":\"noise\",\"type\":\"boolean\",\"doc\":\"Flag indicating that this location qualifies as noise and should be discarded. Noisy locations are never emitted as critical points. Required.\",\"default\":false}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Flag indicating that the object has just stopped moving and became stationary at this position. Required. */
  @Deprecated public boolean stop_start;
  /** Flag indicating that the object is no longer stationary and has just started moving (w.r.t. its previously known raw position). Required. */
  @Deprecated public boolean stop_end;
  /** Flag indicating that speed over ground has just changed significantly (by a threshold parameter) w.r.t. the previously known speed. Required. */
  @Deprecated public boolean change_in_speed_start;
  /** Flag indicating that speed over ground no longer diverges from the average speed over the most recent portion of the trajectory. Required. */
  @Deprecated public boolean change_in_speed_end;
  /** Flag indicating that this is the first position reported by the object when moving at a very low speed (below a threshold parameter). Required. */
  @Deprecated public boolean slow_motion_start;
  /** Flag indicating that this is the last position reported by the object when moving at a very low speed (below a threshold parameter). Required. */
  @Deprecated public boolean slow_motion_end;
  /** Flag indicating that communication with this object was lost at this position (i.e., this is the last location reported just before a communication gap). Required. */
  @Deprecated public boolean gap_start;
  /** Flag indicating that communication with this object has been restored at this position (i.e., this is the first location reported after a communication gap). Required. */
  @Deprecated public boolean gap_end;
  /** Flag indicating that this is a turning point along the trajectory of this object, i.e., its actual heading over ground has just changed significantly (threshold angle parameter) w.r.t. its previous heading. Required. */
  @Deprecated public boolean change_in_heading;
  /** Flag indicating that this location qualifies as noise and should be discarded. Noisy locations are never emitted as critical points. Required. */
  @Deprecated public boolean noise;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public critical_point_annotation() {}

  /**
   * All-args constructor.
   * @param stop_start Flag indicating that the object has just stopped moving and became stationary at this position. Required.
   * @param stop_end Flag indicating that the object is no longer stationary and has just started moving (w.r.t. its previously known raw position). Required.
   * @param change_in_speed_start Flag indicating that speed over ground has just changed significantly (by a threshold parameter) w.r.t. the previously known speed. Required.
   * @param change_in_speed_end Flag indicating that speed over ground no longer diverges from the average speed over the most recent portion of the trajectory. Required.
   * @param slow_motion_start Flag indicating that this is the first position reported by the object when moving at a very low speed (below a threshold parameter). Required.
   * @param slow_motion_end Flag indicating that this is the last position reported by the object when moving at a very low speed (below a threshold parameter). Required.
   * @param gap_start Flag indicating that communication with this object was lost at this position (i.e., this is the last location reported just before a communication gap). Required.
   * @param gap_end Flag indicating that communication with this object has been restored at this position (i.e., this is the first location reported after a communication gap). Required.
   * @param change_in_heading Flag indicating that this is a turning point along the trajectory of this object, i.e., its actual heading over ground has just changed significantly (threshold angle parameter) w.r.t. its previous heading. Required.
   * @param noise Flag indicating that this location qualifies as noise and should be discarded. Noisy locations are never emitted as critical points. Required.
   */
  public critical_point_annotation(java.lang.Boolean stop_start, java.lang.Boolean stop_end, java.lang.Boolean change_in_speed_start, java.lang.Boolean change_in_speed_end, java.lang.Boolean slow_motion_start, java.lang.Boolean slow_motion_end, java.lang.Boolean gap_start, java.lang.Boolean gap_end, java.lang.Boolean change_in_heading, java.lang.Boolean noise) {
    this.stop_start = stop_start;
    this.stop_end = stop_end;
    this.change_in_speed_start = change_in_speed_start;
    this.change_in_speed_end = change_in_speed_end;
    this.slow_motion_start = slow_motion_start;
    this.slow_motion_end = slow_motion_end;
    this.gap_start = gap_start;
    this.gap_end = gap_end;
    this.change_in_heading = change_in_heading;
    this.noise = noise;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return stop_start;
    case 1: return stop_end;
    case 2: return change_in_speed_start;
    case 3: return change_in_speed_end;
    case 4: return slow_motion_start;
    case 5: return slow_motion_end;
    case 6: return gap_start;
    case 7: return gap_end;
    case 8: return change_in_heading;
    case 9: return noise;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: stop_start = (java.lang.Boolean)value$; break;
    case 1: stop_end = (java.lang.Boolean)value$; break;
    case 2: change_in_speed_start = (java.lang.Boolean)value$; break;
    case 3: change_in_speed_end = (java.lang.Boolean)value$; break;
    case 4: slow_motion_start = (java.lang.Boolean)value$; break;
    case 5: slow_motion_end = (java.lang.Boolean)value$; break;
    case 6: gap_start = (java.lang.Boolean)value$; break;
    case 7: gap_end = (java.lang.Boolean)value$; break;
    case 8: change_in_heading = (java.lang.Boolean)value$; break;
    case 9: noise = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'stop_start' field.
   * @return Flag indicating that the object has just stopped moving and became stationary at this position. Required.
   */
  public java.lang.Boolean getStopStart() {
    return stop_start;
  }

  /**
   * Sets the value of the 'stop_start' field.
   * Flag indicating that the object has just stopped moving and became stationary at this position. Required.
   * @param value the value to set.
   */
  public void setStopStart(java.lang.Boolean value) {
    this.stop_start = value;
  }

  /**
   * Gets the value of the 'stop_end' field.
   * @return Flag indicating that the object is no longer stationary and has just started moving (w.r.t. its previously known raw position). Required.
   */
  public java.lang.Boolean getStopEnd() {
    return stop_end;
  }

  /**
   * Sets the value of the 'stop_end' field.
   * Flag indicating that the object is no longer stationary and has just started moving (w.r.t. its previously known raw position). Required.
   * @param value the value to set.
   */
  public void setStopEnd(java.lang.Boolean value) {
    this.stop_end = value;
  }

  /**
   * Gets the value of the 'change_in_speed_start' field.
   * @return Flag indicating that speed over ground has just changed significantly (by a threshold parameter) w.r.t. the previously known speed. Required.
   */
  public java.lang.Boolean getChangeInSpeedStart() {
    return change_in_speed_start;
  }

  /**
   * Sets the value of the 'change_in_speed_start' field.
   * Flag indicating that speed over ground has just changed significantly (by a threshold parameter) w.r.t. the previously known speed. Required.
   * @param value the value to set.
   */
  public void setChangeInSpeedStart(java.lang.Boolean value) {
    this.change_in_speed_start = value;
  }

  /**
   * Gets the value of the 'change_in_speed_end' field.
   * @return Flag indicating that speed over ground no longer diverges from the average speed over the most recent portion of the trajectory. Required.
   */
  public java.lang.Boolean getChangeInSpeedEnd() {
    return change_in_speed_end;
  }

  /**
   * Sets the value of the 'change_in_speed_end' field.
   * Flag indicating that speed over ground no longer diverges from the average speed over the most recent portion of the trajectory. Required.
   * @param value the value to set.
   */
  public void setChangeInSpeedEnd(java.lang.Boolean value) {
    this.change_in_speed_end = value;
  }

  /**
   * Gets the value of the 'slow_motion_start' field.
   * @return Flag indicating that this is the first position reported by the object when moving at a very low speed (below a threshold parameter). Required.
   */
  public java.lang.Boolean getSlowMotionStart() {
    return slow_motion_start;
  }

  /**
   * Sets the value of the 'slow_motion_start' field.
   * Flag indicating that this is the first position reported by the object when moving at a very low speed (below a threshold parameter). Required.
   * @param value the value to set.
   */
  public void setSlowMotionStart(java.lang.Boolean value) {
    this.slow_motion_start = value;
  }

  /**
   * Gets the value of the 'slow_motion_end' field.
   * @return Flag indicating that this is the last position reported by the object when moving at a very low speed (below a threshold parameter). Required.
   */
  public java.lang.Boolean getSlowMotionEnd() {
    return slow_motion_end;
  }

  /**
   * Sets the value of the 'slow_motion_end' field.
   * Flag indicating that this is the last position reported by the object when moving at a very low speed (below a threshold parameter). Required.
   * @param value the value to set.
   */
  public void setSlowMotionEnd(java.lang.Boolean value) {
    this.slow_motion_end = value;
  }

  /**
   * Gets the value of the 'gap_start' field.
   * @return Flag indicating that communication with this object was lost at this position (i.e., this is the last location reported just before a communication gap). Required.
   */
  public java.lang.Boolean getGapStart() {
    return gap_start;
  }

  /**
   * Sets the value of the 'gap_start' field.
   * Flag indicating that communication with this object was lost at this position (i.e., this is the last location reported just before a communication gap). Required.
   * @param value the value to set.
   */
  public void setGapStart(java.lang.Boolean value) {
    this.gap_start = value;
  }

  /**
   * Gets the value of the 'gap_end' field.
   * @return Flag indicating that communication with this object has been restored at this position (i.e., this is the first location reported after a communication gap). Required.
   */
  public java.lang.Boolean getGapEnd() {
    return gap_end;
  }

  /**
   * Sets the value of the 'gap_end' field.
   * Flag indicating that communication with this object has been restored at this position (i.e., this is the first location reported after a communication gap). Required.
   * @param value the value to set.
   */
  public void setGapEnd(java.lang.Boolean value) {
    this.gap_end = value;
  }

  /**
   * Gets the value of the 'change_in_heading' field.
   * @return Flag indicating that this is a turning point along the trajectory of this object, i.e., its actual heading over ground has just changed significantly (threshold angle parameter) w.r.t. its previous heading. Required.
   */
  public java.lang.Boolean getChangeInHeading() {
    return change_in_heading;
  }

  /**
   * Sets the value of the 'change_in_heading' field.
   * Flag indicating that this is a turning point along the trajectory of this object, i.e., its actual heading over ground has just changed significantly (threshold angle parameter) w.r.t. its previous heading. Required.
   * @param value the value to set.
   */
  public void setChangeInHeading(java.lang.Boolean value) {
    this.change_in_heading = value;
  }

  /**
   * Gets the value of the 'noise' field.
   * @return Flag indicating that this location qualifies as noise and should be discarded. Noisy locations are never emitted as critical points. Required.
   */
  public java.lang.Boolean getNoise() {
    return noise;
  }

  /**
   * Sets the value of the 'noise' field.
   * Flag indicating that this location qualifies as noise and should be discarded. Noisy locations are never emitted as critical points. Required.
   * @param value the value to set.
   */
  public void setNoise(java.lang.Boolean value) {
    this.noise = value;
  }

  /**
   * Creates a new critical_point_annotation RecordBuilder.
   * @return A new critical_point_annotation RecordBuilder
   */
  public static eu.datacron.synopses.maritime.critical_point_annotation.Builder newBuilder() {
    return new eu.datacron.synopses.maritime.critical_point_annotation.Builder();
  }

  /**
   * Creates a new critical_point_annotation RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new critical_point_annotation RecordBuilder
   */
  public static eu.datacron.synopses.maritime.critical_point_annotation.Builder newBuilder(eu.datacron.synopses.maritime.critical_point_annotation.Builder other) {
    return new eu.datacron.synopses.maritime.critical_point_annotation.Builder(other);
  }

  /**
   * Creates a new critical_point_annotation RecordBuilder by copying an existing critical_point_annotation instance.
   * @param other The existing instance to copy.
   * @return A new critical_point_annotation RecordBuilder
   */
  public static eu.datacron.synopses.maritime.critical_point_annotation.Builder newBuilder(eu.datacron.synopses.maritime.critical_point_annotation other) {
    return new eu.datacron.synopses.maritime.critical_point_annotation.Builder(other);
  }

  /**
   * RecordBuilder for critical_point_annotation instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<critical_point_annotation>
    implements org.apache.avro.data.RecordBuilder<critical_point_annotation> {

    /** Flag indicating that the object has just stopped moving and became stationary at this position. Required. */
    private boolean stop_start;
    /** Flag indicating that the object is no longer stationary and has just started moving (w.r.t. its previously known raw position). Required. */
    private boolean stop_end;
    /** Flag indicating that speed over ground has just changed significantly (by a threshold parameter) w.r.t. the previously known speed. Required. */
    private boolean change_in_speed_start;
    /** Flag indicating that speed over ground no longer diverges from the average speed over the most recent portion of the trajectory. Required. */
    private boolean change_in_speed_end;
    /** Flag indicating that this is the first position reported by the object when moving at a very low speed (below a threshold parameter). Required. */
    private boolean slow_motion_start;
    /** Flag indicating that this is the last position reported by the object when moving at a very low speed (below a threshold parameter). Required. */
    private boolean slow_motion_end;
    /** Flag indicating that communication with this object was lost at this position (i.e., this is the last location reported just before a communication gap). Required. */
    private boolean gap_start;
    /** Flag indicating that communication with this object has been restored at this position (i.e., this is the first location reported after a communication gap). Required. */
    private boolean gap_end;
    /** Flag indicating that this is a turning point along the trajectory of this object, i.e., its actual heading over ground has just changed significantly (threshold angle parameter) w.r.t. its previous heading. Required. */
    private boolean change_in_heading;
    /** Flag indicating that this location qualifies as noise and should be discarded. Noisy locations are never emitted as critical points. Required. */
    private boolean noise;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.datacron.synopses.maritime.critical_point_annotation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.stop_start)) {
        this.stop_start = data().deepCopy(fields()[0].schema(), other.stop_start);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.stop_end)) {
        this.stop_end = data().deepCopy(fields()[1].schema(), other.stop_end);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.change_in_speed_start)) {
        this.change_in_speed_start = data().deepCopy(fields()[2].schema(), other.change_in_speed_start);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.change_in_speed_end)) {
        this.change_in_speed_end = data().deepCopy(fields()[3].schema(), other.change_in_speed_end);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.slow_motion_start)) {
        this.slow_motion_start = data().deepCopy(fields()[4].schema(), other.slow_motion_start);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.slow_motion_end)) {
        this.slow_motion_end = data().deepCopy(fields()[5].schema(), other.slow_motion_end);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.gap_start)) {
        this.gap_start = data().deepCopy(fields()[6].schema(), other.gap_start);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.gap_end)) {
        this.gap_end = data().deepCopy(fields()[7].schema(), other.gap_end);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.change_in_heading)) {
        this.change_in_heading = data().deepCopy(fields()[8].schema(), other.change_in_heading);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.noise)) {
        this.noise = data().deepCopy(fields()[9].schema(), other.noise);
        fieldSetFlags()[9] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing critical_point_annotation instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.datacron.synopses.maritime.critical_point_annotation other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.stop_start)) {
        this.stop_start = data().deepCopy(fields()[0].schema(), other.stop_start);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.stop_end)) {
        this.stop_end = data().deepCopy(fields()[1].schema(), other.stop_end);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.change_in_speed_start)) {
        this.change_in_speed_start = data().deepCopy(fields()[2].schema(), other.change_in_speed_start);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.change_in_speed_end)) {
        this.change_in_speed_end = data().deepCopy(fields()[3].schema(), other.change_in_speed_end);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.slow_motion_start)) {
        this.slow_motion_start = data().deepCopy(fields()[4].schema(), other.slow_motion_start);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.slow_motion_end)) {
        this.slow_motion_end = data().deepCopy(fields()[5].schema(), other.slow_motion_end);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.gap_start)) {
        this.gap_start = data().deepCopy(fields()[6].schema(), other.gap_start);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.gap_end)) {
        this.gap_end = data().deepCopy(fields()[7].schema(), other.gap_end);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.change_in_heading)) {
        this.change_in_heading = data().deepCopy(fields()[8].schema(), other.change_in_heading);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.noise)) {
        this.noise = data().deepCopy(fields()[9].schema(), other.noise);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'stop_start' field.
      * Flag indicating that the object has just stopped moving and became stationary at this position. Required.
      * @return The value.
      */
    public java.lang.Boolean getStopStart() {
      return stop_start;
    }

    /**
      * Sets the value of the 'stop_start' field.
      * Flag indicating that the object has just stopped moving and became stationary at this position. Required.
      * @param value The value of 'stop_start'.
      * @return This builder.
      */
    public eu.datacron.synopses.maritime.critical_point_annotation.Builder setStopStart(boolean value) {
      validate(fields()[0], value);
      this.stop_start = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'stop_start' field has been set.
      * Flag indicating that the object has just stopped moving and became stationary at this position. Required.
      * @return True if the 'stop_start' field has been set, false otherwise.
      */
    public boolean hasStopStart() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'stop_start' field.
      * Flag indicating that the object has just stopped moving and became stationary at this position. Required.
      * @return This builder.
      */
    public eu.datacron.synopses.maritime.critical_point_annotation.Builder clearStopStart() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'stop_end' field.
      * Flag indicating that the object is no longer stationary and has just started moving (w.r.t. its previously known raw position). Required.
      * @return The value.
      */
    public java.lang.Boolean getStopEnd() {
      return stop_end;
    }

    /**
      * Sets the value of the 'stop_end' field.
      * Flag indicating that the object is no longer stationary and has just started moving (w.r.t. its previously known raw position). Required.
      * @param value The value of 'stop_end'.
      * @return This builder.
      */
    public eu.datacron.synopses.maritime.critical_point_annotation.Builder setStopEnd(boolean value) {
      validate(fields()[1], value);
      this.stop_end = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'stop_end' field has been set.
      * Flag indicating that the object is no longer stationary and has just started moving (w.r.t. its previously known raw position). Required.
      * @return True if the 'stop_end' field has been set, false otherwise.
      */
    public boolean hasStopEnd() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'stop_end' field.
      * Flag indicating that the object is no longer stationary and has just started moving (w.r.t. its previously known raw position). Required.
      * @return This builder.
      */
    public eu.datacron.synopses.maritime.critical_point_annotation.Builder clearStopEnd() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'change_in_speed_start' field.
      * Flag indicating that speed over ground has just changed significantly (by a threshold parameter) w.r.t. the previously known speed. Required.
      * @return The value.
      */
    public java.lang.Boolean getChangeInSpeedStart() {
      return change_in_speed_start;
    }

    /**
      * Sets the value of the 'change_in_speed_start' field.
      * Flag indicating that speed over ground has just changed significantly (by a threshold parameter) w.r.t. the previously known speed. Required.
      * @param value The value of 'change_in_speed_start'.
      * @return This builder.
      */
    public eu.datacron.synopses.maritime.critical_point_annotation.Builder setChangeInSpeedStart(boolean value) {
      validate(fields()[2], value);
      this.change_in_speed_start = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'change_in_speed_start' field has been set.
      * Flag indicating that speed over ground has just changed significantly (by a threshold parameter) w.r.t. the previously known speed. Required.
      * @return True if the 'change_in_speed_start' field has been set, false otherwise.
      */
    public boolean hasChangeInSpeedStart() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'change_in_speed_start' field.
      * Flag indicating that speed over ground has just changed significantly (by a threshold parameter) w.r.t. the previously known speed. Required.
      * @return This builder.
      */
    public eu.datacron.synopses.maritime.critical_point_annotation.Builder clearChangeInSpeedStart() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'change_in_speed_end' field.
      * Flag indicating that speed over ground no longer diverges from the average speed over the most recent portion of the trajectory. Required.
      * @return The value.
      */
    public java.lang.Boolean getChangeInSpeedEnd() {
      return change_in_speed_end;
    }

    /**
      * Sets the value of the 'change_in_speed_end' field.
      * Flag indicating that speed over ground no longer diverges from the average speed over the most recent portion of the trajectory. Required.
      * @param value The value of 'change_in_speed_end'.
      * @return This builder.
      */
    public eu.datacron.synopses.maritime.critical_point_annotation.Builder setChangeInSpeedEnd(boolean value) {
      validate(fields()[3], value);
      this.change_in_speed_end = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'change_in_speed_end' field has been set.
      * Flag indicating that speed over ground no longer diverges from the average speed over the most recent portion of the trajectory. Required.
      * @return True if the 'change_in_speed_end' field has been set, false otherwise.
      */
    public boolean hasChangeInSpeedEnd() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'change_in_speed_end' field.
      * Flag indicating that speed over ground no longer diverges from the average speed over the most recent portion of the trajectory. Required.
      * @return This builder.
      */
    public eu.datacron.synopses.maritime.critical_point_annotation.Builder clearChangeInSpeedEnd() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'slow_motion_start' field.
      * Flag indicating that this is the first position reported by the object when moving at a very low speed (below a threshold parameter). Required.
      * @return The value.
      */
    public java.lang.Boolean getSlowMotionStart() {
      return slow_motion_start;
    }

    /**
      * Sets the value of the 'slow_motion_start' field.
      * Flag indicating that this is the first position reported by the object when moving at a very low speed (below a threshold parameter). Required.
      * @param value The value of 'slow_motion_start'.
      * @return This builder.
      */
    public eu.datacron.synopses.maritime.critical_point_annotation.Builder setSlowMotionStart(boolean value) {
      validate(fields()[4], value);
      this.slow_motion_start = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'slow_motion_start' field has been set.
      * Flag indicating that this is the first position reported by the object when moving at a very low speed (below a threshold parameter). Required.
      * @return True if the 'slow_motion_start' field has been set, false otherwise.
      */
    public boolean hasSlowMotionStart() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'slow_motion_start' field.
      * Flag indicating that this is the first position reported by the object when moving at a very low speed (below a threshold parameter). Required.
      * @return This builder.
      */
    public eu.datacron.synopses.maritime.critical_point_annotation.Builder clearSlowMotionStart() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'slow_motion_end' field.
      * Flag indicating that this is the last position reported by the object when moving at a very low speed (below a threshold parameter). Required.
      * @return The value.
      */
    public java.lang.Boolean getSlowMotionEnd() {
      return slow_motion_end;
    }

    /**
      * Sets the value of the 'slow_motion_end' field.
      * Flag indicating that this is the last position reported by the object when moving at a very low speed (below a threshold parameter). Required.
      * @param value The value of 'slow_motion_end'.
      * @return This builder.
      */
    public eu.datacron.synopses.maritime.critical_point_annotation.Builder setSlowMotionEnd(boolean value) {
      validate(fields()[5], value);
      this.slow_motion_end = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'slow_motion_end' field has been set.
      * Flag indicating that this is the last position reported by the object when moving at a very low speed (below a threshold parameter). Required.
      * @return True if the 'slow_motion_end' field has been set, false otherwise.
      */
    public boolean hasSlowMotionEnd() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'slow_motion_end' field.
      * Flag indicating that this is the last position reported by the object when moving at a very low speed (below a threshold parameter). Required.
      * @return This builder.
      */
    public eu.datacron.synopses.maritime.critical_point_annotation.Builder clearSlowMotionEnd() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'gap_start' field.
      * Flag indicating that communication with this object was lost at this position (i.e., this is the last location reported just before a communication gap). Required.
      * @return The value.
      */
    public java.lang.Boolean getGapStart() {
      return gap_start;
    }

    /**
      * Sets the value of the 'gap_start' field.
      * Flag indicating that communication with this object was lost at this position (i.e., this is the last location reported just before a communication gap). Required.
      * @param value The value of 'gap_start'.
      * @return This builder.
      */
    public eu.datacron.synopses.maritime.critical_point_annotation.Builder setGapStart(boolean value) {
      validate(fields()[6], value);
      this.gap_start = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'gap_start' field has been set.
      * Flag indicating that communication with this object was lost at this position (i.e., this is the last location reported just before a communication gap). Required.
      * @return True if the 'gap_start' field has been set, false otherwise.
      */
    public boolean hasGapStart() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'gap_start' field.
      * Flag indicating that communication with this object was lost at this position (i.e., this is the last location reported just before a communication gap). Required.
      * @return This builder.
      */
    public eu.datacron.synopses.maritime.critical_point_annotation.Builder clearGapStart() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'gap_end' field.
      * Flag indicating that communication with this object has been restored at this position (i.e., this is the first location reported after a communication gap). Required.
      * @return The value.
      */
    public java.lang.Boolean getGapEnd() {
      return gap_end;
    }

    /**
      * Sets the value of the 'gap_end' field.
      * Flag indicating that communication with this object has been restored at this position (i.e., this is the first location reported after a communication gap). Required.
      * @param value The value of 'gap_end'.
      * @return This builder.
      */
    public eu.datacron.synopses.maritime.critical_point_annotation.Builder setGapEnd(boolean value) {
      validate(fields()[7], value);
      this.gap_end = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'gap_end' field has been set.
      * Flag indicating that communication with this object has been restored at this position (i.e., this is the first location reported after a communication gap). Required.
      * @return True if the 'gap_end' field has been set, false otherwise.
      */
    public boolean hasGapEnd() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'gap_end' field.
      * Flag indicating that communication with this object has been restored at this position (i.e., this is the first location reported after a communication gap). Required.
      * @return This builder.
      */
    public eu.datacron.synopses.maritime.critical_point_annotation.Builder clearGapEnd() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'change_in_heading' field.
      * Flag indicating that this is a turning point along the trajectory of this object, i.e., its actual heading over ground has just changed significantly (threshold angle parameter) w.r.t. its previous heading. Required.
      * @return The value.
      */
    public java.lang.Boolean getChangeInHeading() {
      return change_in_heading;
    }

    /**
      * Sets the value of the 'change_in_heading' field.
      * Flag indicating that this is a turning point along the trajectory of this object, i.e., its actual heading over ground has just changed significantly (threshold angle parameter) w.r.t. its previous heading. Required.
      * @param value The value of 'change_in_heading'.
      * @return This builder.
      */
    public eu.datacron.synopses.maritime.critical_point_annotation.Builder setChangeInHeading(boolean value) {
      validate(fields()[8], value);
      this.change_in_heading = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'change_in_heading' field has been set.
      * Flag indicating that this is a turning point along the trajectory of this object, i.e., its actual heading over ground has just changed significantly (threshold angle parameter) w.r.t. its previous heading. Required.
      * @return True if the 'change_in_heading' field has been set, false otherwise.
      */
    public boolean hasChangeInHeading() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'change_in_heading' field.
      * Flag indicating that this is a turning point along the trajectory of this object, i.e., its actual heading over ground has just changed significantly (threshold angle parameter) w.r.t. its previous heading. Required.
      * @return This builder.
      */
    public eu.datacron.synopses.maritime.critical_point_annotation.Builder clearChangeInHeading() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'noise' field.
      * Flag indicating that this location qualifies as noise and should be discarded. Noisy locations are never emitted as critical points. Required.
      * @return The value.
      */
    public java.lang.Boolean getNoise() {
      return noise;
    }

    /**
      * Sets the value of the 'noise' field.
      * Flag indicating that this location qualifies as noise and should be discarded. Noisy locations are never emitted as critical points. Required.
      * @param value The value of 'noise'.
      * @return This builder.
      */
    public eu.datacron.synopses.maritime.critical_point_annotation.Builder setNoise(boolean value) {
      validate(fields()[9], value);
      this.noise = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'noise' field has been set.
      * Flag indicating that this location qualifies as noise and should be discarded. Noisy locations are never emitted as critical points. Required.
      * @return True if the 'noise' field has been set, false otherwise.
      */
    public boolean hasNoise() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'noise' field.
      * Flag indicating that this location qualifies as noise and should be discarded. Noisy locations are never emitted as critical points. Required.
      * @return This builder.
      */
    public eu.datacron.synopses.maritime.critical_point_annotation.Builder clearNoise() {
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    public critical_point_annotation build() {
      try {
        critical_point_annotation record = new critical_point_annotation();
        record.stop_start = fieldSetFlags()[0] ? this.stop_start : (java.lang.Boolean) defaultValue(fields()[0]);
        record.stop_end = fieldSetFlags()[1] ? this.stop_end : (java.lang.Boolean) defaultValue(fields()[1]);
        record.change_in_speed_start = fieldSetFlags()[2] ? this.change_in_speed_start : (java.lang.Boolean) defaultValue(fields()[2]);
        record.change_in_speed_end = fieldSetFlags()[3] ? this.change_in_speed_end : (java.lang.Boolean) defaultValue(fields()[3]);
        record.slow_motion_start = fieldSetFlags()[4] ? this.slow_motion_start : (java.lang.Boolean) defaultValue(fields()[4]);
        record.slow_motion_end = fieldSetFlags()[5] ? this.slow_motion_end : (java.lang.Boolean) defaultValue(fields()[5]);
        record.gap_start = fieldSetFlags()[6] ? this.gap_start : (java.lang.Boolean) defaultValue(fields()[6]);
        record.gap_end = fieldSetFlags()[7] ? this.gap_end : (java.lang.Boolean) defaultValue(fields()[7]);
        record.change_in_heading = fieldSetFlags()[8] ? this.change_in_heading : (java.lang.Boolean) defaultValue(fields()[8]);
        record.noise = fieldSetFlags()[9] ? this.noise : (java.lang.Boolean) defaultValue(fields()[9]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
