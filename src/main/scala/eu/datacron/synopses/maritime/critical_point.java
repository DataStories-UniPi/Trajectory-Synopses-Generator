/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.datacron.synopses.maritime;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** A critical point (a timestamped 2-dimensional location) along the trajectory synopsis of a moving object (vessel). Refer to datAcron Task 2.1 Specifications on Trajectory Detection & Summarization for more information. AVRO schema developed by Kostas Patroumpas (UPRC). */
@org.apache.avro.specific.AvroGenerated
public class critical_point extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4671630546892588687L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"critical_point\",\"namespace\":\"eu.datacron.synopses.maritime\",\"doc\":\"A critical point (a timestamped 2-dimensional location) along the trajectory synopsis of a moving object (vessel). Refer to datAcron Task 2.1 Specifications on Trajectory Detection & Summarization for more information. AVRO schema developed by Kostas Patroumpas (UPRC).\",\"fields\":[{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"UNIX epoch timestamp (i.e., milliseconds elapsed since 1970-01-01 00:00:00.000). Required.\"},{\"name\":\"id\",\"type\":\"string\",\"doc\":\"A globally unique identifier for the moving object (usually, the MMSI of vessels). Required.\"},{\"name\":\"longitude\",\"type\":\"double\",\"doc\":\"Longitude coordinate in decimal degrees (georeference: WGS84) of this point location. Required.\"},{\"name\":\"latitude\",\"type\":\"double\",\"doc\":\"Latitude coordinate in decimal degrees (georeference: WGS84) of this point location. Required.\"},{\"name\":\"annotation\",\"type\":{\"type\":\"record\",\"name\":\"critical_point_annotation\",\"fields\":[{\"name\":\"stop_start\",\"type\":\"boolean\",\"doc\":\"Flag indicating that the object has just stopped moving and became stationary at this position. Required.\",\"default\":false},{\"name\":\"stop_end\",\"type\":\"boolean\",\"doc\":\"Flag indicating that the object is no longer stationary and has just started moving (w.r.t. its previously known raw position). Required.\",\"default\":false},{\"name\":\"change_in_speed_start\",\"type\":\"boolean\",\"doc\":\"Flag indicating that speed over ground has just changed significantly (by a threshold parameter) w.r.t. the previously known speed. Required.\",\"default\":false},{\"name\":\"change_in_speed_end\",\"type\":\"boolean\",\"doc\":\"Flag indicating that speed over ground no longer diverges from the average speed over the most recent portion of the trajectory. Required.\",\"default\":false},{\"name\":\"slow_motion_start\",\"type\":\"boolean\",\"doc\":\"Flag indicating that this is the first position reported by the object when moving at a very low speed (below a threshold parameter). Required.\",\"default\":false},{\"name\":\"slow_motion_end\",\"type\":\"boolean\",\"doc\":\"Flag indicating that this is the last position reported by the object when moving at a very low speed (below a threshold parameter). Required.\",\"default\":false},{\"name\":\"gap_start\",\"type\":\"boolean\",\"doc\":\"Flag indicating that communication with this object was lost at this position (i.e., this is the last location reported just before a communication gap). Required.\",\"default\":false},{\"name\":\"gap_end\",\"type\":\"boolean\",\"doc\":\"Flag indicating that communication with this object has been restored at this position (i.e., this is the first location reported after a communication gap). Required.\",\"default\":false},{\"name\":\"change_in_heading\",\"type\":\"boolean\",\"doc\":\"Flag indicating that this is a turning point along the trajectory of this object, i.e., its actual heading over ground has just changed significantly (threshold angle parameter) w.r.t. its previous heading. Required.\",\"default\":false},{\"name\":\"noise\",\"type\":\"boolean\",\"doc\":\"Flag indicating that this location qualifies as noise and should be discarded. Noisy locations are never emitted as critical points. Required.\",\"default\":false}]},\"doc\":\"Characterization of this point location (i.e., as a critical point in the trajectory synopsis) with respect to mobility. Required.\",\"default\":{}},{\"name\":\"distance\",\"type\":\"double\",\"doc\":\"Travelled distance (in meters) of the moving object from its previously reported raw position (CAUTION! NOT the previously detected critical point!) to its current one. Required.\"},{\"name\":\"speed\",\"type\":\"double\",\"doc\":\"Instantaneous speed over ground (in knots) of the moving object at this location (w.r.t. its previously reported raw position). Required.\"},{\"name\":\"heading\",\"type\":\"double\",\"doc\":\"Instantaneous heading over ground (azimuth: degrees clockwise from North) of the moving object at this location (w.r.t. its previously reported raw position). Required.\"},{\"name\":\"time_elapsed\",\"type\":\"long\",\"doc\":\"Time elapsed (as UNIX epoch interval in milliseconds) since the previously reported raw position of this object. Required.\"},{\"name\":\"msg_error_flag\",\"type\":\"string\",\"doc\":\"The MariWeb Security Appliance (MSA) error flags (if available). Optional.\"},{\"name\":\"ingestion_timestamp\",\"type\":\"long\",\"doc\":\"UNIX epoch timestamp (i.e., milliseconds elapsed since 1970-01-01 00:00:00.000) assigned at the admission point to the module (transaction time). Optional.\"}],\"version\":0.7}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** UNIX epoch timestamp (i.e., milliseconds elapsed since 1970-01-01 00:00:00.000). Required. */
  @Deprecated public long timestamp;
  /** A globally unique identifier for the moving object (usually, the MMSI of vessels). Required. */
  @Deprecated public java.lang.CharSequence id;
  /** Longitude coordinate in decimal degrees (georeference: WGS84) of this point location. Required. */
  @Deprecated public double longitude;
  /** Latitude coordinate in decimal degrees (georeference: WGS84) of this point location. Required. */
  @Deprecated public double latitude;
  /** Characterization of this point location (i.e., as a critical point in the trajectory synopsis) with respect to mobility. Required. */
  @Deprecated public eu.datacron.synopses.maritime.critical_point_annotation annotation;
  /** Travelled distance (in meters) of the moving object from its previously reported raw position (CAUTION! NOT the previously detected critical point!) to its current one. Required. */
  @Deprecated public double distance;
  /** Instantaneous speed over ground (in knots) of the moving object at this location (w.r.t. its previously reported raw position). Required. */
  @Deprecated public double speed;
  /** Instantaneous heading over ground (azimuth: degrees clockwise from North) of the moving object at this location (w.r.t. its previously reported raw position). Required. */
  @Deprecated public double heading;
  /** Time elapsed (as UNIX epoch interval in milliseconds) since the previously reported raw position of this object. Required. */
  @Deprecated public long time_elapsed;
  /** The MariWeb Security Appliance (MSA) error flags (if available). Optional. */
  @Deprecated public java.lang.CharSequence msg_error_flag;
  /** UNIX epoch timestamp (i.e., milliseconds elapsed since 1970-01-01 00:00:00.000) assigned at the admission point to the module (transaction time). Optional. */
  @Deprecated public long ingestion_timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public critical_point() {}

  /**
   * All-args constructor.
   * @param timestamp UNIX epoch timestamp (i.e., milliseconds elapsed since 1970-01-01 00:00:00.000). Required.
   * @param id A globally unique identifier for the moving object (usually, the MMSI of vessels). Required.
   * @param longitude Longitude coordinate in decimal degrees (georeference: WGS84) of this point location. Required.
   * @param latitude Latitude coordinate in decimal degrees (georeference: WGS84) of this point location. Required.
   * @param annotation Characterization of this point location (i.e., as a critical point in the trajectory synopsis) with respect to mobility. Required.
   * @param distance Travelled distance (in meters) of the moving object from its previously reported raw position (CAUTION! NOT the previously detected critical point!) to its current one. Required.
   * @param speed Instantaneous speed over ground (in knots) of the moving object at this location (w.r.t. its previously reported raw position). Required.
   * @param heading Instantaneous heading over ground (azimuth: degrees clockwise from North) of the moving object at this location (w.r.t. its previously reported raw position). Required.
   * @param time_elapsed Time elapsed (as UNIX epoch interval in milliseconds) since the previously reported raw position of this object. Required.
   * @param msg_error_flag The MariWeb Security Appliance (MSA) error flags (if available). Optional.
   * @param ingestion_timestamp UNIX epoch timestamp (i.e., milliseconds elapsed since 1970-01-01 00:00:00.000) assigned at the admission point to the module (transaction time). Optional.
   */
  public critical_point(java.lang.Long timestamp, java.lang.CharSequence id, java.lang.Double longitude, java.lang.Double latitude, eu.datacron.synopses.maritime.critical_point_annotation annotation, java.lang.Double distance, java.lang.Double speed, java.lang.Double heading, java.lang.Long time_elapsed, java.lang.CharSequence msg_error_flag, java.lang.Long ingestion_timestamp) {
    this.timestamp = timestamp;
    this.id = id;
    this.longitude = longitude;
    this.latitude = latitude;
    this.annotation = annotation;
    this.distance = distance;
    this.speed = speed;
    this.heading = heading;
    this.time_elapsed = time_elapsed;
    this.msg_error_flag = msg_error_flag;
    this.ingestion_timestamp = ingestion_timestamp;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timestamp;
    case 1: return id;
    case 2: return longitude;
    case 3: return latitude;
    case 4: return annotation;
    case 5: return distance;
    case 6: return speed;
    case 7: return heading;
    case 8: return time_elapsed;
    case 9: return msg_error_flag;
    case 10: return ingestion_timestamp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timestamp = (java.lang.Long)value$; break;
    case 1: id = (java.lang.CharSequence)value$; break;
    case 2: longitude = (java.lang.Double)value$; break;
    case 3: latitude = (java.lang.Double)value$; break;
    case 4: annotation = (eu.datacron.synopses.maritime.critical_point_annotation)value$; break;
    case 5: distance = (java.lang.Double)value$; break;
    case 6: speed = (java.lang.Double)value$; break;
    case 7: heading = (java.lang.Double)value$; break;
    case 8: time_elapsed = (java.lang.Long)value$; break;
    case 9: msg_error_flag = (java.lang.CharSequence)value$; break;
    case 10: ingestion_timestamp = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return UNIX epoch timestamp (i.e., milliseconds elapsed since 1970-01-01 00:00:00.000). Required.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * UNIX epoch timestamp (i.e., milliseconds elapsed since 1970-01-01 00:00:00.000). Required.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return A globally unique identifier for the moving object (usually, the MMSI of vessels). Required.
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * A globally unique identifier for the moving object (usually, the MMSI of vessels). Required.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'longitude' field.
   * @return Longitude coordinate in decimal degrees (georeference: WGS84) of this point location. Required.
   */
  public java.lang.Double getLongitude() {
    return longitude;
  }

  /**
   * Sets the value of the 'longitude' field.
   * Longitude coordinate in decimal degrees (georeference: WGS84) of this point location. Required.
   * @param value the value to set.
   */
  public void setLongitude(java.lang.Double value) {
    this.longitude = value;
  }

  /**
   * Gets the value of the 'latitude' field.
   * @return Latitude coordinate in decimal degrees (georeference: WGS84) of this point location. Required.
   */
  public java.lang.Double getLatitude() {
    return latitude;
  }

  /**
   * Sets the value of the 'latitude' field.
   * Latitude coordinate in decimal degrees (georeference: WGS84) of this point location. Required.
   * @param value the value to set.
   */
  public void setLatitude(java.lang.Double value) {
    this.latitude = value;
  }

  /**
   * Gets the value of the 'annotation' field.
   * @return Characterization of this point location (i.e., as a critical point in the trajectory synopsis) with respect to mobility. Required.
   */
  public eu.datacron.synopses.maritime.critical_point_annotation getAnnotation() {
    return annotation;
  }

  /**
   * Sets the value of the 'annotation' field.
   * Characterization of this point location (i.e., as a critical point in the trajectory synopsis) with respect to mobility. Required.
   * @param value the value to set.
   */
  public void setAnnotation(eu.datacron.synopses.maritime.critical_point_annotation value) {
    this.annotation = value;
  }

  /**
   * Gets the value of the 'distance' field.
   * @return Travelled distance (in meters) of the moving object from its previously reported raw position (CAUTION! NOT the previously detected critical point!) to its current one. Required.
   */
  public java.lang.Double getDistance() {
    return distance;
  }

  /**
   * Sets the value of the 'distance' field.
   * Travelled distance (in meters) of the moving object from its previously reported raw position (CAUTION! NOT the previously detected critical point!) to its current one. Required.
   * @param value the value to set.
   */
  public void setDistance(java.lang.Double value) {
    this.distance = value;
  }

  /**
   * Gets the value of the 'speed' field.
   * @return Instantaneous speed over ground (in knots) of the moving object at this location (w.r.t. its previously reported raw position). Required.
   */
  public java.lang.Double getSpeed() {
    return speed;
  }

  /**
   * Sets the value of the 'speed' field.
   * Instantaneous speed over ground (in knots) of the moving object at this location (w.r.t. its previously reported raw position). Required.
   * @param value the value to set.
   */
  public void setSpeed(java.lang.Double value) {
    this.speed = value;
  }

  /**
   * Gets the value of the 'heading' field.
   * @return Instantaneous heading over ground (azimuth: degrees clockwise from North) of the moving object at this location (w.r.t. its previously reported raw position). Required.
   */
  public java.lang.Double getHeading() {
    return heading;
  }

  /**
   * Sets the value of the 'heading' field.
   * Instantaneous heading over ground (azimuth: degrees clockwise from North) of the moving object at this location (w.r.t. its previously reported raw position). Required.
   * @param value the value to set.
   */
  public void setHeading(java.lang.Double value) {
    this.heading = value;
  }

  /**
   * Gets the value of the 'time_elapsed' field.
   * @return Time elapsed (as UNIX epoch interval in milliseconds) since the previously reported raw position of this object. Required.
   */
  public java.lang.Long getTimeElapsed() {
    return time_elapsed;
  }

  /**
   * Sets the value of the 'time_elapsed' field.
   * Time elapsed (as UNIX epoch interval in milliseconds) since the previously reported raw position of this object. Required.
   * @param value the value to set.
   */
  public void setTimeElapsed(java.lang.Long value) {
    this.time_elapsed = value;
  }

  /**
   * Gets the value of the 'msg_error_flag' field.
   * @return The MariWeb Security Appliance (MSA) error flags (if available). Optional.
   */
  public java.lang.CharSequence getMsgErrorFlag() {
    return msg_error_flag;
  }

  /**
   * Sets the value of the 'msg_error_flag' field.
   * The MariWeb Security Appliance (MSA) error flags (if available). Optional.
   * @param value the value to set.
   */
  public void setMsgErrorFlag(java.lang.CharSequence value) {
    this.msg_error_flag = value;
  }

  /**
   * Gets the value of the 'ingestion_timestamp' field.
   * @return UNIX epoch timestamp (i.e., milliseconds elapsed since 1970-01-01 00:00:00.000) assigned at the admission point to the module (transaction time). Optional.
   */
  public java.lang.Long getIngestionTimestamp() {
    return ingestion_timestamp;
  }

  /**
   * Sets the value of the 'ingestion_timestamp' field.
   * UNIX epoch timestamp (i.e., milliseconds elapsed since 1970-01-01 00:00:00.000) assigned at the admission point to the module (transaction time). Optional.
   * @param value the value to set.
   */
  public void setIngestionTimestamp(java.lang.Long value) {
    this.ingestion_timestamp = value;
  }

  /**
   * Creates a new critical_point RecordBuilder.
   * @return A new critical_point RecordBuilder
   */
  public static eu.datacron.synopses.maritime.critical_point.Builder newBuilder() {
    return new eu.datacron.synopses.maritime.critical_point.Builder();
  }

  /**
   * Creates a new critical_point RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new critical_point RecordBuilder
   */
  public static eu.datacron.synopses.maritime.critical_point.Builder newBuilder(eu.datacron.synopses.maritime.critical_point.Builder other) {
    return new eu.datacron.synopses.maritime.critical_point.Builder(other);
  }

  /**
   * Creates a new critical_point RecordBuilder by copying an existing critical_point instance.
   * @param other The existing instance to copy.
   * @return A new critical_point RecordBuilder
   */
  public static eu.datacron.synopses.maritime.critical_point.Builder newBuilder(eu.datacron.synopses.maritime.critical_point other) {
    return new eu.datacron.synopses.maritime.critical_point.Builder(other);
  }

  /**
   * RecordBuilder for critical_point instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<critical_point>
    implements org.apache.avro.data.RecordBuilder<critical_point> {

    /** UNIX epoch timestamp (i.e., milliseconds elapsed since 1970-01-01 00:00:00.000). Required. */
    private long timestamp;
    /** A globally unique identifier for the moving object (usually, the MMSI of vessels). Required. */
    private java.lang.CharSequence id;
    /** Longitude coordinate in decimal degrees (georeference: WGS84) of this point location. Required. */
    private double longitude;
    /** Latitude coordinate in decimal degrees (georeference: WGS84) of this point location. Required. */
    private double latitude;
    /** Characterization of this point location (i.e., as a critical point in the trajectory synopsis) with respect to mobility. Required. */
    private eu.datacron.synopses.maritime.critical_point_annotation annotation;
    private eu.datacron.synopses.maritime.critical_point_annotation.Builder annotationBuilder;
    /** Travelled distance (in meters) of the moving object from its previously reported raw position (CAUTION! NOT the previously detected critical point!) to its current one. Required. */
    private double distance;
    /** Instantaneous speed over ground (in knots) of the moving object at this location (w.r.t. its previously reported raw position). Required. */
    private double speed;
    /** Instantaneous heading over ground (azimuth: degrees clockwise from North) of the moving object at this location (w.r.t. its previously reported raw position). Required. */
    private double heading;
    /** Time elapsed (as UNIX epoch interval in milliseconds) since the previously reported raw position of this object. Required. */
    private long time_elapsed;
    /** The MariWeb Security Appliance (MSA) error flags (if available). Optional. */
    private java.lang.CharSequence msg_error_flag;
    /** UNIX epoch timestamp (i.e., milliseconds elapsed since 1970-01-01 00:00:00.000) assigned at the admission point to the module (transaction time). Optional. */
    private long ingestion_timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.datacron.synopses.maritime.critical_point.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.id)) {
        this.id = data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.longitude)) {
        this.longitude = data().deepCopy(fields()[2].schema(), other.longitude);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.latitude)) {
        this.latitude = data().deepCopy(fields()[3].schema(), other.latitude);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.annotation)) {
        this.annotation = data().deepCopy(fields()[4].schema(), other.annotation);
        fieldSetFlags()[4] = true;
      }
      if (other.hasAnnotationBuilder()) {
        this.annotationBuilder = eu.datacron.synopses.maritime.critical_point_annotation.newBuilder(other.getAnnotationBuilder());
      }
      if (isValidValue(fields()[5], other.distance)) {
        this.distance = data().deepCopy(fields()[5].schema(), other.distance);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.speed)) {
        this.speed = data().deepCopy(fields()[6].schema(), other.speed);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.heading)) {
        this.heading = data().deepCopy(fields()[7].schema(), other.heading);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.time_elapsed)) {
        this.time_elapsed = data().deepCopy(fields()[8].schema(), other.time_elapsed);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.msg_error_flag)) {
        this.msg_error_flag = data().deepCopy(fields()[9].schema(), other.msg_error_flag);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.ingestion_timestamp)) {
        this.ingestion_timestamp = data().deepCopy(fields()[10].schema(), other.ingestion_timestamp);
        fieldSetFlags()[10] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing critical_point instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.datacron.synopses.maritime.critical_point other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.id)) {
        this.id = data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.longitude)) {
        this.longitude = data().deepCopy(fields()[2].schema(), other.longitude);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.latitude)) {
        this.latitude = data().deepCopy(fields()[3].schema(), other.latitude);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.annotation)) {
        this.annotation = data().deepCopy(fields()[4].schema(), other.annotation);
        fieldSetFlags()[4] = true;
      }
      this.annotationBuilder = null;
      if (isValidValue(fields()[5], other.distance)) {
        this.distance = data().deepCopy(fields()[5].schema(), other.distance);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.speed)) {
        this.speed = data().deepCopy(fields()[6].schema(), other.speed);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.heading)) {
        this.heading = data().deepCopy(fields()[7].schema(), other.heading);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.time_elapsed)) {
        this.time_elapsed = data().deepCopy(fields()[8].schema(), other.time_elapsed);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.msg_error_flag)) {
        this.msg_error_flag = data().deepCopy(fields()[9].schema(), other.msg_error_flag);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.ingestion_timestamp)) {
        this.ingestion_timestamp = data().deepCopy(fields()[10].schema(), other.ingestion_timestamp);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'timestamp' field.
      * UNIX epoch timestamp (i.e., milliseconds elapsed since 1970-01-01 00:00:00.000). Required.
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * UNIX epoch timestamp (i.e., milliseconds elapsed since 1970-01-01 00:00:00.000). Required.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public eu.datacron.synopses.maritime.critical_point.Builder setTimestamp(long value) {
      validate(fields()[0], value);
      this.timestamp = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * UNIX epoch timestamp (i.e., milliseconds elapsed since 1970-01-01 00:00:00.000). Required.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * UNIX epoch timestamp (i.e., milliseconds elapsed since 1970-01-01 00:00:00.000). Required.
      * @return This builder.
      */
    public eu.datacron.synopses.maritime.critical_point.Builder clearTimestamp() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * A globally unique identifier for the moving object (usually, the MMSI of vessels). Required.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * A globally unique identifier for the moving object (usually, the MMSI of vessels). Required.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public eu.datacron.synopses.maritime.critical_point.Builder setId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * A globally unique identifier for the moving object (usually, the MMSI of vessels). Required.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'id' field.
      * A globally unique identifier for the moving object (usually, the MMSI of vessels). Required.
      * @return This builder.
      */
    public eu.datacron.synopses.maritime.critical_point.Builder clearId() {
      id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'longitude' field.
      * Longitude coordinate in decimal degrees (georeference: WGS84) of this point location. Required.
      * @return The value.
      */
    public java.lang.Double getLongitude() {
      return longitude;
    }

    /**
      * Sets the value of the 'longitude' field.
      * Longitude coordinate in decimal degrees (georeference: WGS84) of this point location. Required.
      * @param value The value of 'longitude'.
      * @return This builder.
      */
    public eu.datacron.synopses.maritime.critical_point.Builder setLongitude(double value) {
      validate(fields()[2], value);
      this.longitude = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'longitude' field has been set.
      * Longitude coordinate in decimal degrees (georeference: WGS84) of this point location. Required.
      * @return True if the 'longitude' field has been set, false otherwise.
      */
    public boolean hasLongitude() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'longitude' field.
      * Longitude coordinate in decimal degrees (georeference: WGS84) of this point location. Required.
      * @return This builder.
      */
    public eu.datacron.synopses.maritime.critical_point.Builder clearLongitude() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'latitude' field.
      * Latitude coordinate in decimal degrees (georeference: WGS84) of this point location. Required.
      * @return The value.
      */
    public java.lang.Double getLatitude() {
      return latitude;
    }

    /**
      * Sets the value of the 'latitude' field.
      * Latitude coordinate in decimal degrees (georeference: WGS84) of this point location. Required.
      * @param value The value of 'latitude'.
      * @return This builder.
      */
    public eu.datacron.synopses.maritime.critical_point.Builder setLatitude(double value) {
      validate(fields()[3], value);
      this.latitude = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'latitude' field has been set.
      * Latitude coordinate in decimal degrees (georeference: WGS84) of this point location. Required.
      * @return True if the 'latitude' field has been set, false otherwise.
      */
    public boolean hasLatitude() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'latitude' field.
      * Latitude coordinate in decimal degrees (georeference: WGS84) of this point location. Required.
      * @return This builder.
      */
    public eu.datacron.synopses.maritime.critical_point.Builder clearLatitude() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'annotation' field.
      * Characterization of this point location (i.e., as a critical point in the trajectory synopsis) with respect to mobility. Required.
      * @return The value.
      */
    public eu.datacron.synopses.maritime.critical_point_annotation getAnnotation() {
      return annotation;
    }

    /**
      * Sets the value of the 'annotation' field.
      * Characterization of this point location (i.e., as a critical point in the trajectory synopsis) with respect to mobility. Required.
      * @param value The value of 'annotation'.
      * @return This builder.
      */
    public eu.datacron.synopses.maritime.critical_point.Builder setAnnotation(eu.datacron.synopses.maritime.critical_point_annotation value) {
      validate(fields()[4], value);
      this.annotationBuilder = null;
      this.annotation = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'annotation' field has been set.
      * Characterization of this point location (i.e., as a critical point in the trajectory synopsis) with respect to mobility. Required.
      * @return True if the 'annotation' field has been set, false otherwise.
      */
    public boolean hasAnnotation() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'annotation' field and creates one if it doesn't exist yet.
     * Characterization of this point location (i.e., as a critical point in the trajectory synopsis) with respect to mobility. Required.
     * @return This builder.
     */
    public eu.datacron.synopses.maritime.critical_point_annotation.Builder getAnnotationBuilder() {
      if (annotationBuilder == null) {
        if (hasAnnotation()) {
          setAnnotationBuilder(eu.datacron.synopses.maritime.critical_point_annotation.newBuilder(annotation));
        } else {
          setAnnotationBuilder(eu.datacron.synopses.maritime.critical_point_annotation.newBuilder());
        }
      }
      return annotationBuilder;
    }

    /**
     * Sets the Builder instance for the 'annotation' field
     * Characterization of this point location (i.e., as a critical point in the trajectory synopsis) with respect to mobility. Required.
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public eu.datacron.synopses.maritime.critical_point.Builder setAnnotationBuilder(eu.datacron.synopses.maritime.critical_point_annotation.Builder value) {
      clearAnnotation();
      annotationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'annotation' field has an active Builder instance
     * Characterization of this point location (i.e., as a critical point in the trajectory synopsis) with respect to mobility. Required.
     * @return True if the 'annotation' field has an active Builder instance
     */
    public boolean hasAnnotationBuilder() {
      return annotationBuilder != null;
    }

    /**
      * Clears the value of the 'annotation' field.
      * Characterization of this point location (i.e., as a critical point in the trajectory synopsis) with respect to mobility. Required.
      * @return This builder.
      */
    public eu.datacron.synopses.maritime.critical_point.Builder clearAnnotation() {
      annotation = null;
      annotationBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'distance' field.
      * Travelled distance (in meters) of the moving object from its previously reported raw position (CAUTION! NOT the previously detected critical point!) to its current one. Required.
      * @return The value.
      */
    public java.lang.Double getDistance() {
      return distance;
    }

    /**
      * Sets the value of the 'distance' field.
      * Travelled distance (in meters) of the moving object from its previously reported raw position (CAUTION! NOT the previously detected critical point!) to its current one. Required.
      * @param value The value of 'distance'.
      * @return This builder.
      */
    public eu.datacron.synopses.maritime.critical_point.Builder setDistance(double value) {
      validate(fields()[5], value);
      this.distance = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'distance' field has been set.
      * Travelled distance (in meters) of the moving object from its previously reported raw position (CAUTION! NOT the previously detected critical point!) to its current one. Required.
      * @return True if the 'distance' field has been set, false otherwise.
      */
    public boolean hasDistance() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'distance' field.
      * Travelled distance (in meters) of the moving object from its previously reported raw position (CAUTION! NOT the previously detected critical point!) to its current one. Required.
      * @return This builder.
      */
    public eu.datacron.synopses.maritime.critical_point.Builder clearDistance() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'speed' field.
      * Instantaneous speed over ground (in knots) of the moving object at this location (w.r.t. its previously reported raw position). Required.
      * @return The value.
      */
    public java.lang.Double getSpeed() {
      return speed;
    }

    /**
      * Sets the value of the 'speed' field.
      * Instantaneous speed over ground (in knots) of the moving object at this location (w.r.t. its previously reported raw position). Required.
      * @param value The value of 'speed'.
      * @return This builder.
      */
    public eu.datacron.synopses.maritime.critical_point.Builder setSpeed(double value) {
      validate(fields()[6], value);
      this.speed = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'speed' field has been set.
      * Instantaneous speed over ground (in knots) of the moving object at this location (w.r.t. its previously reported raw position). Required.
      * @return True if the 'speed' field has been set, false otherwise.
      */
    public boolean hasSpeed() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'speed' field.
      * Instantaneous speed over ground (in knots) of the moving object at this location (w.r.t. its previously reported raw position). Required.
      * @return This builder.
      */
    public eu.datacron.synopses.maritime.critical_point.Builder clearSpeed() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'heading' field.
      * Instantaneous heading over ground (azimuth: degrees clockwise from North) of the moving object at this location (w.r.t. its previously reported raw position). Required.
      * @return The value.
      */
    public java.lang.Double getHeading() {
      return heading;
    }

    /**
      * Sets the value of the 'heading' field.
      * Instantaneous heading over ground (azimuth: degrees clockwise from North) of the moving object at this location (w.r.t. its previously reported raw position). Required.
      * @param value The value of 'heading'.
      * @return This builder.
      */
    public eu.datacron.synopses.maritime.critical_point.Builder setHeading(double value) {
      validate(fields()[7], value);
      this.heading = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'heading' field has been set.
      * Instantaneous heading over ground (azimuth: degrees clockwise from North) of the moving object at this location (w.r.t. its previously reported raw position). Required.
      * @return True if the 'heading' field has been set, false otherwise.
      */
    public boolean hasHeading() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'heading' field.
      * Instantaneous heading over ground (azimuth: degrees clockwise from North) of the moving object at this location (w.r.t. its previously reported raw position). Required.
      * @return This builder.
      */
    public eu.datacron.synopses.maritime.critical_point.Builder clearHeading() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'time_elapsed' field.
      * Time elapsed (as UNIX epoch interval in milliseconds) since the previously reported raw position of this object. Required.
      * @return The value.
      */
    public java.lang.Long getTimeElapsed() {
      return time_elapsed;
    }

    /**
      * Sets the value of the 'time_elapsed' field.
      * Time elapsed (as UNIX epoch interval in milliseconds) since the previously reported raw position of this object. Required.
      * @param value The value of 'time_elapsed'.
      * @return This builder.
      */
    public eu.datacron.synopses.maritime.critical_point.Builder setTimeElapsed(long value) {
      validate(fields()[8], value);
      this.time_elapsed = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'time_elapsed' field has been set.
      * Time elapsed (as UNIX epoch interval in milliseconds) since the previously reported raw position of this object. Required.
      * @return True if the 'time_elapsed' field has been set, false otherwise.
      */
    public boolean hasTimeElapsed() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'time_elapsed' field.
      * Time elapsed (as UNIX epoch interval in milliseconds) since the previously reported raw position of this object. Required.
      * @return This builder.
      */
    public eu.datacron.synopses.maritime.critical_point.Builder clearTimeElapsed() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'msg_error_flag' field.
      * The MariWeb Security Appliance (MSA) error flags (if available). Optional.
      * @return The value.
      */
    public java.lang.CharSequence getMsgErrorFlag() {
      return msg_error_flag;
    }

    /**
      * Sets the value of the 'msg_error_flag' field.
      * The MariWeb Security Appliance (MSA) error flags (if available). Optional.
      * @param value The value of 'msg_error_flag'.
      * @return This builder.
      */
    public eu.datacron.synopses.maritime.critical_point.Builder setMsgErrorFlag(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.msg_error_flag = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'msg_error_flag' field has been set.
      * The MariWeb Security Appliance (MSA) error flags (if available). Optional.
      * @return True if the 'msg_error_flag' field has been set, false otherwise.
      */
    public boolean hasMsgErrorFlag() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'msg_error_flag' field.
      * The MariWeb Security Appliance (MSA) error flags (if available). Optional.
      * @return This builder.
      */
    public eu.datacron.synopses.maritime.critical_point.Builder clearMsgErrorFlag() {
      msg_error_flag = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'ingestion_timestamp' field.
      * UNIX epoch timestamp (i.e., milliseconds elapsed since 1970-01-01 00:00:00.000) assigned at the admission point to the module (transaction time). Optional.
      * @return The value.
      */
    public java.lang.Long getIngestionTimestamp() {
      return ingestion_timestamp;
    }

    /**
      * Sets the value of the 'ingestion_timestamp' field.
      * UNIX epoch timestamp (i.e., milliseconds elapsed since 1970-01-01 00:00:00.000) assigned at the admission point to the module (transaction time). Optional.
      * @param value The value of 'ingestion_timestamp'.
      * @return This builder.
      */
    public eu.datacron.synopses.maritime.critical_point.Builder setIngestionTimestamp(long value) {
      validate(fields()[10], value);
      this.ingestion_timestamp = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'ingestion_timestamp' field has been set.
      * UNIX epoch timestamp (i.e., milliseconds elapsed since 1970-01-01 00:00:00.000) assigned at the admission point to the module (transaction time). Optional.
      * @return True if the 'ingestion_timestamp' field has been set, false otherwise.
      */
    public boolean hasIngestionTimestamp() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'ingestion_timestamp' field.
      * UNIX epoch timestamp (i.e., milliseconds elapsed since 1970-01-01 00:00:00.000) assigned at the admission point to the module (transaction time). Optional.
      * @return This builder.
      */
    public eu.datacron.synopses.maritime.critical_point.Builder clearIngestionTimestamp() {
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    public critical_point build() {
      try {
        critical_point record = new critical_point();
        record.timestamp = fieldSetFlags()[0] ? this.timestamp : (java.lang.Long) defaultValue(fields()[0]);
        record.id = fieldSetFlags()[1] ? this.id : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.longitude = fieldSetFlags()[2] ? this.longitude : (java.lang.Double) defaultValue(fields()[2]);
        record.latitude = fieldSetFlags()[3] ? this.latitude : (java.lang.Double) defaultValue(fields()[3]);
        if (annotationBuilder != null) {
          record.annotation = this.annotationBuilder.build();
        } else {
          record.annotation = fieldSetFlags()[4] ? this.annotation : (eu.datacron.synopses.maritime.critical_point_annotation) defaultValue(fields()[4]);
        }
        record.distance = fieldSetFlags()[5] ? this.distance : (java.lang.Double) defaultValue(fields()[5]);
        record.speed = fieldSetFlags()[6] ? this.speed : (java.lang.Double) defaultValue(fields()[6]);
        record.heading = fieldSetFlags()[7] ? this.heading : (java.lang.Double) defaultValue(fields()[7]);
        record.time_elapsed = fieldSetFlags()[8] ? this.time_elapsed : (java.lang.Long) defaultValue(fields()[8]);
        record.msg_error_flag = fieldSetFlags()[9] ? this.msg_error_flag : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.ingestion_timestamp = fieldSetFlags()[10] ? this.ingestion_timestamp : (java.lang.Long) defaultValue(fields()[10]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
